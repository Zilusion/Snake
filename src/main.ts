// import './styles/main.scss';
// import { Game } from './game';
// import type { LevelData } from './types';
// import * as api from './apiService';
// import * as authStore from './authStore';

// const CELL_SIZE = 40;
// const LS_KEY_SAVED_LEVEL_SERVER_ID = 'snakeGameSavedLevelServerId';

// let currentGame: Game | null = null;
// let availableServerLevels: {
// 	id: string;
// 	name: string;
// 	is_completed: boolean;
// 	layout: LevelData;
// 	is_locked: boolean;
// }[] = [];
// let currentLevelServerId: string | null = null;
// let levelStartTime: number | null = null;

// authStore.subscribe((user) => {
//     updateAuthHeaderUI(user); // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
//     if (user) {
//         // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è (–∏–ª–∏ —É–∂–µ –±—ã–ª –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
//         showPage('game');
//         fetchAvailableLevelsAndLoadInitial(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–≤–Ω–∏ –∏ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–≤—ã–π/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π
//     } else {
//         // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–ª—Å—è –∏–ª–∏ –Ω–µ –±—ã–ª –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
//         updateLevelSelectionUI(); // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π
//         if (currentGame) {
//             currentGame.destroy();
//             currentGame = null;
//             gameCanvasContainer.innerHTML = '';
//         }
//         disableGameControls(); // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç/–°—Ç–æ–ø/–†–µ—Å–µ—Ç
//         showPage('auth');
//         createAuthForms(); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã
//     }
// });


// const appContainer = document.getElementById('app-container')!;
// const appHeader = document.getElementById('app-header')!;
// const authPage = document.getElementById('auth-page') as HTMLElement;
// const gamePage = document.getElementById('game-page') as HTMLElement;
// const levelSelectionContainer = document.getElementById('level-selection-container') as HTMLElement;
// const gameCanvasContainer = document.getElementById('game-canvas-container') as HTMLElement;
// const gameControlsContainer = document.getElementById('game-controls-container') as HTMLElement;
// const victoryModalContainer = document.getElementById('victory-modal-container') as HTMLElement;

// let logoutButton: HTMLButtonElement;
// let currentUserSpan: HTMLSpanElement;
// // –ö–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç/–°—Ç–æ–ø/–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∏ –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –≤ gameControlsContainer
// let startButton: HTMLButtonElement;
// let stopButton: HTMLButtonElement;
// let resetButton: HTMLButtonElement;


// function showPage(pageId: 'auth' | 'game') {
//     authPage.style.display = 'none';
//     gamePage.style.display = 'none';

//     if (pageId === 'auth') {
//         authPage.style.display = 'block'; // –∏–ª–∏ 'flex' –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
//     } else if (pageId === 'game') {
//         gamePage.style.display = 'flex'; // –∏–ª–∏ 'flex'
//     }
// }


// function createHeaderUI() {
//     appHeader.innerHTML = ''; // –û—á–∏—â–∞–µ–º, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º

//     currentUserSpan = document.createElement('span');
//     currentUserSpan.id = 'currentUserSpan';
//     currentUserSpan.classList.add('current-user-display');

//     logoutButton = document.createElement('button');
//     logoutButton.textContent = '–í—ã—Ö–æ–¥';
//     logoutButton.classList.add('button', 'button-logout'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
//     logoutButton.addEventListener('click', logout);
//     logoutButton.style.display = 'none'; // –°–Ω–∞—á–∞–ª–∞ —Å–∫—Ä—ã—Ç

//     const title = document.createElement('h1');
//     title.textContent = 'Snake Puzzle Game';
//     title.classList.add('app-title');

//     appHeader.append(title, currentUserSpan, logoutButton);
// }

// function createAuthForms() {
//     authPage.innerHTML = ''; // –û—á–∏—â–∞–µ–º –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
//     const formContainer = document.createElement('div');
//     formContainer.classList.add('auth-form-container');

//     const title = document.createElement('h2');
//     title.textContent = '–í—Ö–æ–¥ –∏–ª–∏ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';

//     const usernameLabel = document.createElement('label');
//     usernameLabel.htmlFor = 'username';
//     usernameLabel.textContent = '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:';
//     const usernameInput = document.createElement('input');
//     usernameInput.type = 'text';
//     usernameInput.id = 'username';
//     usernameInput.placeholder = '–õ–æ–≥–∏–Ω';
//     usernameInput.required = true;

//     const passwordLabel = document.createElement('label');
//     passwordLabel.htmlFor = 'password';
//     passwordLabel.textContent = '–ü–∞—Ä–æ–ª—å:';
//     const passwordInput = document.createElement('input');
//     passwordInput.type = 'password';
//     passwordInput.id = 'password';
//     passwordInput.placeholder = '–ü–∞—Ä–æ–ª—å';
//     passwordInput.required = true;

//     const buttonGroup = document.createElement('div');
//     buttonGroup.classList.add('auth-buttons');

//     const registerButton = document.createElement('button');
//     registerButton.textContent = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
//     registerButton.classList.add('button');
//     registerButton.addEventListener('click', () => {
//         if (usernameInput.value && passwordInput.value) {
//             register(usernameInput.value, passwordInput.value);
//         } else {
//             alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å.');
//         }
//     });

//     const loginButton = document.createElement('button');
//     loginButton.textContent = '–í—Ö–æ–¥';
//     loginButton.classList.add('button');
//     loginButton.addEventListener('click', () => {
//          if (usernameInput.value && passwordInput.value) {
//             login(usernameInput.value, passwordInput.value);
//         } else {
//             alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å.');
//         }
//     });

//     buttonGroup.append(loginButton, registerButton);
//     formContainer.append(title, usernameLabel, usernameInput, passwordLabel, passwordInput, buttonGroup);
//     authPage.append(formContainer);
// }

// function updateAuthHeaderUI(user: { id: number; username: string } | null = null) {
//     if (user) {
//         currentUserSpan.textContent = `–ò–≥—Ä–æ–∫: ${user.username}`;
//         logoutButton.style.display = 'inline-block';
//         showPage('game'); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–≥—Ä—ã
//     } else {
//         currentUserSpan.textContent = '';
//         logoutButton.style.display = 'none';
//         showPage('auth'); // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
//         createAuthForms(); // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—ã –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
//     }
// }

// function updateLevelSelectionUI() {
//     levelSelectionContainer.innerHTML = '';
//     const user = authStore.getCurrentUser();

//     if (!user) {
//         levelSelectionContainer.innerHTML = '<p>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Ä–æ–≤–Ω—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.</p>';
//         disableGameControls();
//         return;
//     }

//     if (!availableServerLevels || availableServerLevels.length === 0) {
//          levelSelectionContainer.innerHTML = '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π.</p>';
//          disableGameControls();
//          return;
//     }

//     const listTitle = document.createElement('h3');
//     listTitle.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å:";
//     levelSelectionContainer.append(listTitle);

//     const levelList = document.createElement('div');
//     levelList.classList.add('level-list');

//     availableServerLevels.forEach((serverLevel) => {
//         const levelButton = document.createElement('button');
//         levelButton.classList.add('button', 'level-button');
//         if (serverLevel.is_completed) {
//             levelButton.classList.add('completed');
//         }
//         // is_locked –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±—ã—Ç—å –≥–ª–∞–≤–Ω—ã–º.
//         // –ï—Å–ª–∏ is_locked, —Ç–æ –∫–Ω–æ–ø–∫–∞ disabled.
//         if (serverLevel.is_locked) {
//             levelButton.classList.add('locked');
//             levelButton.disabled = true;
//         }

//         levelButton.textContent = `${serverLevel.name}${serverLevel.is_completed ? ' ‚úîÔ∏è' : ''}${serverLevel.is_locked ? ' üîí' : ''}`;

//         // –ö–ª–∏–∫–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å layout
//         if (!serverLevel.is_locked && serverLevel.layout) {
//             levelButton.addEventListener('click', () => {
//                 loadLevel(serverLevel.layout, serverLevel.id);
//             });
//         } else {
//             levelButton.disabled = true; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–Ω–∞ disabled, –µ—Å–ª–∏ –Ω–µ—Ç layout –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
//         }
//         levelList.append(levelButton);
//     });
//     levelSelectionContainer.append(levelList);
// }

// function createGameControls() {
//     gameControlsContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º

//     startButton = document.createElement('button');
//     startButton.textContent = '–°—Ç–∞—Ä—Ç / –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å';
//     startButton.classList.add('button');
//     startButton.disabled = true;
//     startButton.addEventListener('click', () => {if (currentGame && !currentGame.isActive) {
// 		currentGame.start();
// 		startButton.disabled = true;
// 		stopButton.disabled = false;
// 		hideVictoryModal();
// 	} });

//     stopButton = document.createElement('button');
//     stopButton.textContent = '–°—Ç–æ–ø / –ü–∞—É–∑–∞';
//     stopButton.classList.add('button');
//     stopButton.disabled = true;
//     stopButton.addEventListener('click', () => { if (currentGame && currentGame.isActive) {
// 		currentGame.stop();
// 		startButton.disabled = false;
// 		stopButton.disabled = true;
// 	}});

//     resetButton = document.createElement('button');
//     resetButton.textContent = '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –£—Ä–æ–≤–Ω—è';
//     resetButton.classList.add('button');
//     resetButton.disabled = true;
//     resetButton.addEventListener('click', () => { if (currentGame && currentLevelServerId) {
//         const levelToReload = availableServerLevels.find(l => l.id === currentLevelServerId);
//         if (levelToReload && levelToReload.layout) {
// 		    loadLevel(levelToReload.layout, levelToReload.id);
//         } else {
//             console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å: –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
//         }
// 	} });

//     gameControlsContainer.append(startButton, stopButton, resetButton);
// }

// async function fetchAvailableLevelsAndLoadInitial() {
//     try {
//         const levelsDataFromServer = await api.getLevels();
//         availableServerLevels = levelsDataFromServer || [];
//         updateLevelSelectionUI(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞

//         if (availableServerLevels.length > 0) {
//             let levelToLoad: typeof availableServerLevels[0] | undefined;
//             const savedLevelId = localStorage.getItem(LS_KEY_SAVED_LEVEL_SERVER_ID);

//             if (savedLevelId) {
//                 levelToLoad = availableServerLevels.find(l => l.id === savedLevelId && !l.is_locked && l.layout);
//             }

//             if (!levelToLoad) { // –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
//                 // –ò—â–µ–º –ø–µ—Ä–≤—ã–π –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ò –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–≤—ã–π –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
//                 levelToLoad = availableServerLevels.find(l => !l.is_locked && !l.is_completed && l.layout) ||
//                               availableServerLevels.find(l => !l.is_locked && l.layout);
//             }

//             if (levelToLoad && levelToLoad.layout) {
//                 loadLevel(levelToLoad.layout, levelToLoad.id);
//             } else if (authStore.getCurrentUser()) { // –ó–∞–ª–æ–≥–∏–Ω–µ–Ω, –Ω–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã
//                  gameCanvasContainer.innerHTML = `<p style="text-align: center;">–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∏–≥—Ä—ã!</p>`;
//                  disableGameControls();
//             } else {
//                  console.error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!');
//                  gameCanvasContainer.innerHTML = '<p style="color: red; text-align: center;">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π!</p>';
//                  disableGameControls();
//             }
//         } else {
//             gameCanvasContainer.innerHTML = '<p style="text-align: center;">–£—Ä–æ–≤–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.</p>';
//             disableGameControls();
//         }
//     } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π:", error);
//         gameCanvasContainer.innerHTML = '<p style="color: red; text-align: center;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω–µ–π. –°–º. –∫–æ–Ω—Å–æ–ª—å.</p>';
//         disableGameControls();
//         // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401 –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Ä–æ–≤–Ω–µ–π (–µ—Å–ª–∏ /api/levels –∑–∞—â–∏—â–µ–Ω), —Ç–æ authStore —Å–∞–º –¥–æ–ª–∂–µ–Ω –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
//     }
// }

// function loadLevel(levelLayout: LevelData, levelIdFromServer: string): void {
// 	if (currentGame) {
// 		currentGame.destroy();
// 		currentGame = null;
// 	}
// 	gameCanvasContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–≥—Ä—ã
// 	currentLevelServerId = levelIdFromServer;
// 	try {
// 		localStorage.setItem(LS_KEY_SAVED_LEVEL_SERVER_ID, levelIdFromServer);
// 	} catch (error) {
// 		console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —É—Ä–æ–≤–Ω—è:', error);
// 	}

// 	console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω—è: ${levelIdFromServer}`);
// 	try {
// 		levelStartTime = performance.now(); // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
// 		api.startAttempt(currentLevelServerId)
// 			.then((data) =>
// 				console.log('–ü–æ–ø—ã—Ç–∫–∞ –∏–≥—Ä—ã –Ω–∞—á–∞—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', data),
// 			)
// 			.catch((error) =>
// 				console.error('–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error),
// 			);

// 		currentGame = new Game(
// 			levelLayout, // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ layout
// 			CELL_SIZE,
// 			gameCanvasContainer,
// 			(completedLevelLayout) =>
// 				handleVictory(completedLevelLayout, levelIdFromServer), // –ü–µ—Ä–µ–¥–∞–µ–º –∏ ID
// 		);
// 		currentGame.start();
// 		startButton.disabled = true;
// 		stopButton.disabled = false;
// 		resetButton.disabled = false;
// 		hideVictoryModal();
// 	} catch (error) {
// 		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã:', error);
// 		gameCanvasContainer.innerHTML = `<p style="color: red; text-align: center;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã. –°–º. –∫–æ–Ω—Å–æ–ª—å.</p>`;
// 		startButton.disabled = true;
// 		stopButton.disabled = true;
// 		resetButton.disabled = true;
// 	}
// }



// // --- –§—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---
// async function register(username: string, password: string) {
// 	try {
// 		const data = await api.register(username, password);
// 		authStore.setCurrentUser(data.user);
// 	} catch (error) {
// 		console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
// 	}
// }

// async function login(username: string, password: string) {
// 	try {
// 		const data = await api.login(username, password);
// 		authStore.setCurrentUser(data.user);
// 	} catch (error) {
// 		console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
// 	}
// }

// async function logout() {
// 	try {
// 		await api.logout();
// 		authStore.setCurrentUser(null);
// 	} catch (error) {
// 		console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
// 	}
// }

// async function checkInitialAuthStatus() {
// 	try {
//         const data = await api.getMe(); // api.getMe –≤–µ—Ä–Ω–µ—Ç null –ø—Ä–∏ 401 –±–µ–∑ –≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏
//         authStore.setCurrentUser(data ? data.user : null);
//     } catch (error) { // –°—é–¥–∞ –ø–æ–ø–∞–¥—É—Ç —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥–∏–µ —Å–µ—Ç–µ–≤—ã–µ/—Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ—Ç apiRequest
//         console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏:', error);
//         authStore.setCurrentUser(null); // –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ—à–∏–±–∫–∏ —Ç–æ–∂–µ —Ä–∞–∑–ª–æ–≥–∏–Ω–∏–≤–∞–µ–º
//     }
// }


// async function handleVictory(_completedLevelLayout: LevelData, completedLevelServerId: string): Promise<void> {
//     console.log(`–ü–æ–±–µ–¥–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ: ${completedLevelServerId}!`);
//     const completionTimeMs = levelStartTime ? Math.round(performance.now() - levelStartTime) : 0;
//     levelStartTime = null;

//     if (currentGame) {
//         startButton.disabled = false;
//         stopButton.disabled = true;
//     }

// 	try {
//         await api.completeLevel({
//             levelId: completedLevelServerId,
//             bestTimeMs: completionTimeMs,
//             finalLength: currentGame?.players[0]?.length || 0, // –ü—Ä–∏–º–µ—Ä
//         });
//         console.log('–î–∞–Ω–Ω—ã–µ –æ –ø–æ–±–µ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
//         await fetchAvailableLevels(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π (–º–æ–≥ –æ—Ç–∫—Ä—ã—Ç—å—Å—è —Å–ª–µ–¥—É—é—â–∏–π)
//     } catch (error) {
//         console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–±–µ–¥–µ:', error);
//     }
//     showVictoryModal();
// }

// async function fetchAvailableLevels() {
//     console.log('–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π...');
//     try {
//         const levelsDataFromServer = await api.getLevels();
// 		availableServerLevels = levelsDataFromServer || [];
// 		console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:', availableServerLevels);
//         updateLevelSelectionUI();

//         if (availableServerLevels.length > 0) {
//             let levelToLoad: { id: string; name: string; is_completed: boolean; layout: LevelData } | undefined;
//             const savedLevelId = localStorage.getItem(LS_KEY_SAVED_LEVEL_SERVER_ID);

//             if (savedLevelId) {
//                 levelToLoad = availableServerLevels.find(l => l.id === savedLevelId && l.layout);
//             }
//             if (!levelToLoad) { // –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
//                 levelToLoad = availableServerLevels.find(l => l.layout); // –ü–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
//             }

//             if (levelToLoad && levelToLoad.layout) {
//                 loadLevel(levelToLoad.layout, levelToLoad.id);
//             } else if (authStore.getCurrentUser() && availableServerLevels.length > 0) {
//                  gameCanvasContainer.innerHTML = `<p style="text-align: center;">–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</p>`;
//                  disableGameControls();
//             } else if (!authStore.getCurrentUser() && availableServerLevels.length > 0 && availableServerLevels[0].layout) {
//                  // –î–ª—è –∞–Ω–æ–Ω–∏–º–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
//                  loadLevel(availableServerLevels[0].layout, availableServerLevels[0].id);
//             } else {
//                  console.error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏!');
//                  gameCanvasContainer.innerHTML = '<p style="color: red; text-align: center;">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π!</p>';
//                  disableGameControls();
//             }
//         } else {
//             gameCanvasContainer.innerHTML = '<p style="color: red; text-align: center;">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—Ä–æ–≤–Ω–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞.</p>';
//             disableGameControls();
//         }
//     } catch (error) {
//         gameCanvasContainer.innerHTML = '<p style="color: red; text-align: center;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω–µ–π. –°–º. –∫–æ–Ω—Å–æ–ª—å.</p>';
//         disableGameControls();
//     }
// }

// function disableGameControls() {
//     startButton.disabled = true;
//     stopButton.disabled = true;
//     resetButton.disabled = true;
// }

// function createVictoryModal(): void {
// 	victoryModalContainer.className = 'modal victory-modal';
// 	victoryModalContainer.style.display = 'none';

// 	const modalContent = document.createElement('div');
// 	modalContent.className = 'modal-content';

// 	const title = document.createElement('h2');
// 	title.textContent = '–ü–æ–±–µ–¥–∞!';
// 	title.className = 'modal-title';

// 	const message = document.createElement('p');
// 	message.textContent = '–í—Å–µ —è–±–ª–æ–∫–∏ —Å—ä–µ–¥–µ–Ω—ã!';
// 	message.className = 'modal-message';

// 	const buttonContainer = document.createElement('div');
// 	buttonContainer.className = 'modal-buttons';

// 	const nextLevelButton = document.createElement('button');
// 	nextLevelButton.textContent = '–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å';
// 	nextLevelButton.className = 'modal-button next-level-button';
// 	nextLevelButton.addEventListener('click', async () => {
// 		hideVictoryModal();
//             await fetchAvailableLevels(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–≤–Ω–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
//             // –õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ *–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ* —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ—Å–ª–µ –ø–æ–±–µ–¥—ã
//             const currentLevelIndexInAvailable = availableServerLevels.findIndex(l => l.id === currentLevelServerId);
//             if (currentLevelIndexInAvailable !== -1) {
//                 for (let i = currentLevelIndexInAvailable + 1; i < availableServerLevels.length; i++) {
//                     if (availableServerLevels[i].layout) { // –ù–∞—à–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
//                         loadLevel(availableServerLevels[i].layout, availableServerLevels[i].id);
//                         return;
//                     }
//                 }
//                 // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ –∏ –Ω–µ –Ω–∞—à–ª–∏, –≤–æ–∑–º–æ–∂–Ω–æ, –≤—Å–µ –ø—Ä–æ–π–¥–µ–Ω–æ –∏–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π
//                 console.log("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–æ–π–¥–µ–Ω—ã –∏–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π.");
//                 // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ "–í—Å–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã" –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É
//                  gameCanvasContainer.innerHTML = `<p style="text-align: center;">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å.</p>`;
//                  disableGameControls();
//             }
// 	});

// 	const selectLevelButton = document.createElement('button');
// 	selectLevelButton.textContent = '–í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å';
// 	selectLevelButton.className = 'modal-button select-level-button';
// 	selectLevelButton.addEventListener('click', hideVictoryModal);

// 	buttonContainer.append(nextLevelButton, selectLevelButton);
// 	modalContent.append(title, message, buttonContainer);
// 	victoryModalContainer.append(modalContent);
// 	document.body.append(victoryModalContainer);
// }

// function showVictoryModal(): void {
// 	if (!victoryModalContainer) return;

// 	victoryModalContainer.style.display = 'flex';
// }

// function hideVictoryModal(): void {
// 	if (victoryModalContainer) {
// 		victoryModalContainer.style.display = 'none';
// 	}
// }

// async function initializeApp() {
//     createHeaderUI();
//     createGameControls();
//     createVictoryModal();
//     await checkInitialAuthStatus();
// }

// initializeApp();
// main.ts
import './styles/main.scss';
import { Game } from './game';
import type { LevelData } from './types';
import * as api from './apiService';
import * as authStore from './authStore';

const CELL_SIZE = 40;
const LS_KEY_SAVED_LEVEL_SERVER_ID = 'snakeGameSavedLevelServerId';

let currentGame: Game | null = null;
let availableServerLevels: {
	id: string;
	name: string;
	is_completed: boolean;
	layout: LevelData;
	is_locked: boolean;
}[] = [];
let currentLevelServerId: string | null = null;
let levelStartTime: number | null = null;

authStore.subscribe((user) => {
    updateAuthHeaderUI(user);
    if (user) {
        showPage('game'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–∏–≥—Ä–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É"
        fetchAvailableLevels(); // –ü—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π
        // –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–¥–µ—Å—å
    } else {
        updateLevelSelectionUI(); // –û—á–∏—Å—Ç–∏—Ç —Å–ø–∏—Å–æ–∫, –ø–æ–∫–∞–∂–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—Ö–æ–¥–∞
        if (currentGame) {
            currentGame.destroy();
            currentGame = null;
        }
        gameCanvasContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∫–∞–Ω–≤–∞—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        disableGameControls();
        showPage('auth');
        createAuthForms();
    }
});


const appContainer = document.getElementById('app-container')!;
const appHeader = document.getElementById('app-header')!;
const authPage = document.getElementById('auth-page') as HTMLElement;
const gamePage = document.getElementById('game-page') as HTMLElement;
const levelSelectionContainer = document.getElementById('level-selection-container') as HTMLElement;
const gameCanvasContainer = document.getElementById('game-canvas-container') as HTMLElement;
const gameControlsContainer = document.getElementById('game-controls-container') as HTMLElement;
const victoryModalContainer = document.getElementById('victory-modal-container') as HTMLElement;

let logoutButton: HTMLButtonElement;
let currentUserSpan: HTMLSpanElement;
let startButton: HTMLButtonElement;
let stopButton: HTMLButtonElement;
let resetButton: HTMLButtonElement;


function showPage(pageId: 'auth' | 'game') {
    authPage.style.display = 'none';
    gamePage.style.display = 'none';

    if (pageId === 'auth') {
        authPage.style.display = 'block';
    } else if (pageId === 'game') {
        gamePage.style.display = 'flex'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º flex –¥–ª—è gamePage, —á—Ç–æ–±—ã —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞–ª–∏—Å—å
    }
}


function createHeaderUI() {
    appHeader.innerHTML = '';
    currentUserSpan = document.createElement('span');
    currentUserSpan.id = 'currentUserSpan';
    currentUserSpan.classList.add('current-user-display');

    logoutButton = document.createElement('button');
    logoutButton.textContent = '–í—ã—Ö–æ–¥';
    logoutButton.classList.add('button', 'button-logout');
    logoutButton.addEventListener('click', logout); // –ò—Å–ø–æ–ª—å–∑—É–µ–º logout –∏–∑ main.ts
    logoutButton.style.display = 'none';

    const title = document.createElement('h1');
    title.textContent = 'Snake Puzzle Game';
    title.classList.add('app-title');

    appHeader.append(title, currentUserSpan, logoutButton);
}

function createAuthForms() {
    authPage.innerHTML = '';
    const formContainer = document.createElement('div');
    formContainer.classList.add('auth-form-container');

    const title = document.createElement('h2');
    title.textContent = '–í—Ö–æ–¥ –∏–ª–∏ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';

    const usernameLabel = document.createElement('label');
    usernameLabel.htmlFor = 'username';
    usernameLabel.textContent = '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:';
    const usernameInput = document.createElement('input');
    usernameInput.type = 'text';
    usernameInput.id = 'username';
    usernameInput.placeholder = '–õ–æ–≥–∏–Ω';
    usernameInput.required = true;

    const passwordLabel = document.createElement('label');
    passwordLabel.htmlFor = 'password';
    passwordLabel.textContent = '–ü–∞—Ä–æ–ª—å:';
    const passwordInput = document.createElement('input');
    passwordInput.type = 'password';
    passwordInput.id = 'password';
    passwordInput.placeholder = '–ü–∞—Ä–æ–ª—å';
    passwordInput.required = true;

    const buttonGroup = document.createElement('div');
    buttonGroup.classList.add('auth-buttons');

    const registerButtonElement = document.createElement('button'); // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å —Ñ—É–Ω–∫—Ü–∏–µ–π
    registerButtonElement.textContent = '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
    registerButtonElement.classList.add('button');
    registerButtonElement.addEventListener('click', () => {
        if (usernameInput.value && passwordInput.value) {
            register(usernameInput.value, passwordInput.value); // –ò—Å–ø–æ–ª—å–∑—É–µ–º register –∏–∑ main.ts
        } else {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å.');
        }
    });

    const loginButtonElement = document.createElement('button'); // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
    loginButtonElement.textContent = '–í—Ö–æ–¥';
    loginButtonElement.classList.add('button');
    loginButtonElement.addEventListener('click', () => {
         if (usernameInput.value && passwordInput.value) {
            login(usernameInput.value, passwordInput.value); // –ò—Å–ø–æ–ª—å–∑—É–µ–º login –∏–∑ main.ts
        } else {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å.');
        }
    });

    buttonGroup.append(loginButtonElement, registerButtonElement);
    formContainer.append(title, usernameLabel, usernameInput, passwordLabel, passwordInput, buttonGroup);
    authPage.append(formContainer);
}

function updateAuthHeaderUI(user: { id: number; username: string } | null = null) {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ —à–∞–ø–∫—É
    // –õ–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü (showPage) –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (fetchAvailableLevels)
    // –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ authStore.subscribe
    if (user) {
        currentUserSpan.textContent = `–ò–≥—Ä–æ–∫: ${user.username}`;
        logoutButton.style.display = 'inline-block';
    } else {
        currentUserSpan.textContent = '';
        logoutButton.style.display = 'none';
    }
}

function updateLevelSelectionUI() {
    levelSelectionContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º
    const user = authStore.getCurrentUser();

    if (!user) {
        // –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ authStore.subscribe -> showPage('auth')
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        levelSelectionContainer.innerHTML = '<p class="auth-required-message">–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Ä–æ–≤–Ω—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.</p>';
        gameCanvasContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–≥—Ä—ã
        disableGameControls();
        return;
    }

    if (!availableServerLevels || availableServerLevels.length === 0) {
         levelSelectionContainer.innerHTML = '<p class="no-levels-message">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∏–ª–∏ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏.</p>';
         gameCanvasContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–≥—Ä—ã
         disableGameControls();
         return;
    }

    const listTitle = document.createElement('h3');
    listTitle.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –∏–≥—Ä—ã:";
    listTitle.classList.add('level-selection-title');
    levelSelectionContainer.append(listTitle);

    const levelList = document.createElement('div');
    levelList.classList.add('level-list');

    availableServerLevels.forEach((serverLevel) => {
        const levelButton = document.createElement('button');
        levelButton.classList.add('button', 'level-button');
        if (serverLevel.is_completed) levelButton.classList.add('completed');
        if (serverLevel.is_locked) levelButton.classList.add('locked');

        levelButton.textContent = `${serverLevel.name}${serverLevel.is_completed ? ' ‚úîÔ∏è' : ''}${serverLevel.is_locked ? ' üîí' : ''}`;
        levelButton.disabled = serverLevel.is_locked;

        if (!serverLevel.is_locked && serverLevel.layout) {
            levelButton.addEventListener('click', () => {
                // –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å, —Å–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
                // (–µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –≤–∏–¥–∏–º—ã –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏–≥—Ä—ã, —Ö–æ—Ç—è loadLevel —ç—Ç–æ –∏ —Ç–∞–∫ —Å–¥–µ–ª–∞–µ—Ç)
                levelSelectionContainer.style.display = 'none';
                gameControlsContainer.style.display = 'flex'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä—ã
                loadLevel(serverLevel.layout, serverLevel.id);
            });
        }
        levelList.append(levelButton);
    });
    levelSelectionContainer.append(levelList);
    levelSelectionContainer.style.display = 'flex'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π
    gameCanvasContainer.innerHTML = '<p class="select-level-prompt">–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.</p>'; // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–∞–Ω–≤–∞—Å–∞
    disableGameControls(); // –ö–Ω–æ–ø–∫–∏ –∏–≥—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω—ã, –ø–æ–∫–∞ —É—Ä–æ–≤–µ–Ω—å –Ω–µ –∑–∞–ø—É—â–µ–Ω
}

function createGameControls() {
    gameControlsContainer.innerHTML = '';
    gameControlsContainer.style.display = 'none'; // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç—ã

    startButton = document.createElement('button');
    startButton.textContent = '–°—Ç–∞—Ä—Ç'; // –¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å—Å—è
    startButton.classList.add('button', 'game-control-button');
    startButton.disabled = true;
    startButton.addEventListener('click', () => {
        if (currentGame && !currentGame.isActive) {
            currentGame.start();
            startButton.textContent = '–°—Ç–∞—Ä—Ç'; // –ï—Å–ª–∏ –±—ã–ª–∞ –ø–∞—É–∑–∞
            startButton.disabled = true;
            stopButton.disabled = false;
            hideVictoryModal();
        }
    });

    stopButton = document.createElement('button');
    stopButton.textContent = '–°—Ç–æ–ø';
    stopButton.classList.add('button', 'game-control-button');
    stopButton.disabled = true;
    stopButton.addEventListener('click', () => {
        if (currentGame && currentGame.isActive) {
            currentGame.stop();
            startButton.textContent = '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å';
            startButton.disabled = false;
            stopButton.disabled = true;
        }
    });

    resetButton = document.createElement('button');
    resetButton.textContent = '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –£—Ä–æ–≤–Ω—è';
    resetButton.classList.add('button', 'game-control-button');
    resetButton.disabled = true;
    resetButton.addEventListener('click', () => {
        if (currentLevelServerId) { // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            const levelToReload = availableServerLevels.find(l => l.id === currentLevelServerId);
            if (levelToReload && levelToReload.layout) {
                hideVictoryModal(); // –ï—Å–ª–∏ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –º–æ–¥–∞–ª–∫–∞
                levelSelectionContainer.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω–µ–π
                gameControlsContainer.style.display = 'flex';  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä—ã
                loadLevel(levelToReload.layout, levelToReload.id);
            } else {
                console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å: –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            }
        }
	});

    const backToLevelsButton = document.createElement('button');
    backToLevelsButton.textContent = '–ö –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω–µ–π';
    backToLevelsButton.classList.add('button', 'game-control-button');
    backToLevelsButton.addEventListener('click', () => {
        if (currentGame) {
            currentGame.destroy();
            currentGame = null;
        }
        gameCanvasContainer.innerHTML = '<p class="select-level-prompt">–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.</p>';
        levelSelectionContainer.style.display = 'flex';
        gameControlsContainer.style.display = 'none';
        disableGameControls(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        currentLevelServerId = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        localStorage.removeItem(LS_KEY_SAVED_LEVEL_SERVER_ID); // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
    });

    gameControlsContainer.append(startButton, stopButton, resetButton, backToLevelsButton);
}

// –£–î–ê–õ–Ø–ï–ú fetchAvailableLevelsAndLoadInitial, —Ç.–∫. –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω—è –Ω–µ –Ω—É–∂–Ω–∞

function loadLevel(levelLayout: LevelData, levelIdFromServer: string): void {
	if (currentGame) {
		currentGame.destroy();
		currentGame = null;
	}
	gameCanvasContainer.innerHTML = '';
	currentLevelServerId = levelIdFromServer;
	try {
		localStorage.setItem(LS_KEY_SAVED_LEVEL_SERVER_ID, levelIdFromServer);
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è ID —É—Ä–æ–≤–Ω—è:', error);
	}

	console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω—è: ${levelIdFromServer}`);
	try {
		levelStartTime = performance.now();
		api.startAttempt(currentLevelServerId) // –ù–µ—Ç –Ω—É–∂–¥—ã –∂–¥–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–º–∏—Å –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏–≥—Ä—ã
			.then((data) => console.log('–ü–æ–ø—ã—Ç–∫–∞ –∏–≥—Ä—ã –Ω–∞—á–∞—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', data?.attemptId))
			.catch((error) => console.error('–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –ø–æ–ø—ã—Ç–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', error));

		currentGame = new Game(
			levelLayout,
			CELL_SIZE,
			gameCanvasContainer, // –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è canvas
			(_completedLevelLayout) => handleVictory(levelIdFromServer), // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ ID
		);
		currentGame.start();

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π
		startButton.disabled = true;
		stopButton.disabled = false;
		resetButton.disabled = false;
        gameControlsContainer.style.display = 'flex'; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –≤–∏–¥–Ω—ã
        levelSelectionContainer.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π
		hideVictoryModal();
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã:', error);
		gameCanvasContainer.innerHTML = `<p class="error-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä—ã. –°–º. –∫–æ–Ω—Å–æ–ª—å.</p>`;
		disableGameControls();
        gameControlsContainer.style.display = 'flex'; // –ö–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è
        levelSelectionContainer.style.display = 'none';
	}
}

// --- –§—É–Ω–∫—Ü–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–æ—Å—Ç–∞—é—Ç—Å—è —Ç–µ –∂–µ, —á—Ç–æ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏) ---
async function register(username: string, password: string) {
	try {
		const data = await api.register(username, password);
		authStore.setCurrentUser(data.user); // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç subscribe –∏ –Ω—É–∂–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        // Alert —É–∂–µ –≤ apiRequest
	}
}

async function login(username: string, password: string) {
	try {
		const data = await api.login(username, password);
		authStore.setCurrentUser(data.user); // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç subscribe
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
	}
}

async function logout() {
	try {
		await api.logout();
		authStore.setCurrentUser(null); // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç subscribe
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
	}
}

async function checkInitialAuthStatus() { // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
	try {
        const data = await api.getMe();
        authStore.setCurrentUser(data ? data.user : null); // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç subscribe
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
        authStore.setCurrentUser(null); // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç subscribe
    }
}

async function handleVictory(completedLevelServerId: string): Promise<void> {
    console.log(`–ü–æ–±–µ–¥–∞ –Ω–∞ —É—Ä–æ–≤–Ω–µ: ${completedLevelServerId}!`);
    const completionTimeMs = levelStartTime ? Math.round(performance.now() - levelStartTime) : 0;
    levelStartTime = null;

    // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–≥—Ä–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏, –Ω–æ –Ω–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –∏–ª–∏ "–ö –≤—ã–±–æ—Ä—É —É—Ä–æ–≤–Ω–µ–π"
    if (currentGame) {
        // startButton.disabled = false; // –ë—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –º–æ–¥–∞–ª–∫–æ–π
        stopButton.disabled = true;
        // resetButton.disabled = false; // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–π
    }

	try {
        await api.completeLevel({
            levelId: completedLevelServerId,
            bestTimeMs: completionTimeMs,
            finalLength: currentGame?.players[0]?.length || 0,
        });
        console.log('–î–∞–Ω–Ω—ã–µ –æ –ø–æ–±–µ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.');
        // –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–≤–Ω–∏ –∑–¥–µ—Å—å, –º–æ–¥–∞–ª–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç "—Å–ª–µ–¥. —É—Ä–æ–≤–µ–Ω—å" –∏–ª–∏ "–≤—ã–±—Ä–∞—Ç—å"
        // await fetchAvailableLevels();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–±–µ–¥–µ:', error);
    }
    showVictoryModal(completedLevelServerId); // –ü–µ—Ä–µ–¥–∞–µ–º ID –¥–ª—è –∫–Ω–æ–ø–∫–∏ "—Å–ª–µ–¥. —É—Ä–æ–≤–µ–Ω—å"
}

async function fetchAvailableLevels() { // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç UI —Å–ø–∏—Å–∫–∞
    const user = authStore.getCurrentUser();
    if (!user) {
        availableServerLevels = []; // –û—á–∏—â–∞–µ–º –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ
        updateLevelSelectionUI();
        return;
    }

    console.log('–ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π...');
    try {
        const levelsDataFromServer = await api.getLevels();
		availableServerLevels = levelsDataFromServer || [];
		console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:', availableServerLevels);
        updateLevelSelectionUI();
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É —É—Ä–æ–≤–Ω—è —É–±—Ä–∞–ª–∏ –æ—Ç—Å—é–¥–∞
        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –Ω–µ—Ç, gameCanvasContainer –ø–æ–∫–∞–∂–µ—Ç –∑–∞–≥–ª—É—à–∫—É "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å"
        if (!currentGame) {
            gameCanvasContainer.innerHTML = '<p class="select-level-prompt">–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.</p>';
            disableGameControls(); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–≥—Ä–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã
            gameControlsContainer.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π, –µ—Å–ª–∏ –Ω–µ—Ç –∏–≥—Ä—ã
            levelSelectionContainer.style.display = 'flex'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π
        }

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π:", error);
        availableServerLevels = [];
        updateLevelSelectionUI(); // –ü–æ–∫–∞–∂–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        gameCanvasContainer.innerHTML = '<p class="error-message">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω–µ–π. –°–º. –∫–æ–Ω—Å–æ–ª—å.</p>';
        disableGameControls();
    }
}

function disableGameControls() {
    if (startButton) startButton.disabled = true;
    if (stopButton) stopButton.disabled = true;
    if (resetButton) resetButton.disabled = true;
}

function createVictoryModal(): void {
	victoryModalContainer.innerHTML = ''; // –û—á–∏—â–∞–µ–º –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è
	victoryModalContainer.className = 'modal victory-modal';
	victoryModalContainer.style.display = 'none';

	const modalContent = document.createElement('div');
	modalContent.className = 'modal-content';

	const title = document.createElement('h2');
	title.textContent = '–ü–æ–±–µ–¥–∞!';
	title.className = 'modal-title';

	const message = document.createElement('p');
	message.textContent = '–í—Å–µ —è–±–ª–æ–∫–∏ —Å—ä–µ–¥–µ–Ω—ã!';
	message.className = 'modal-message';

	const buttonContainer = document.createElement('div');
	buttonContainer.className = 'modal-buttons';

	const nextLevelButton = document.createElement('button');
	nextLevelButton.textContent = '–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å';
	nextLevelButton.className = 'modal-button next-level-button';
	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ showVictoryModal, —Ç.–∫. –∑–∞–≤–∏—Å–∏—Ç –æ—Ç completedLevelServerId

	const selectLevelButton = document.createElement('button');
	selectLevelButton.textContent = '–í—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å';
	selectLevelButton.className = 'modal-button select-level-button';
	selectLevelButton.addEventListener('click', () => {
        hideVictoryModal();
        if (currentGame) {
            currentGame.destroy();
            currentGame = null;
        }
        gameCanvasContainer.innerHTML = '<p class="select-level-prompt">–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É.</p>';
        fetchAvailableLevels(); // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –µ–≥–æ
        gameControlsContainer.style.display = 'none'; // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä—ã
        disableGameControls();
        currentLevelServerId = null;
    });

	buttonContainer.append(nextLevelButton, selectLevelButton);
	modalContent.append(title, message, buttonContainer);
	victoryModalContainer.append(modalContent);
	// document.body.append(victoryModalContainer); // –£–∂–µ –≤ HTML
}

let nextLevelButtonHandler: (() => void) | null = null; // –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞

function showVictoryModal(completedLevelId: string): void {
	if (!victoryModalContainer) return;
    const nextLevelButton = victoryModalContainer.querySelector('.next-level-button') as HTMLButtonElement;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –æ–Ω –±—ã–ª
    if (nextLevelButtonHandler && nextLevelButton) {
        nextLevelButton.removeEventListener('click', nextLevelButtonHandler);
    }

    nextLevelButtonHandler = async () => {
		hideVictoryModal();
        await fetchAvailableLevels(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫, —Ç.–∫. –º–æ–≥–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å—Å—è –Ω–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏
        const currentIdx = availableServerLevels.findIndex(l => l.id === completedLevelId);
        let nextPlayableLevel: typeof availableServerLevels[0] | undefined;
        if (currentIdx !== -1) {
            for (let i = currentIdx + 1; i < availableServerLevels.length; i++) {
                if (availableServerLevels[i].layout && !availableServerLevels[i].is_locked) {
                    nextPlayableLevel = availableServerLevels[i];
                    break;
                }
            }
        }

        if (nextPlayableLevel) {
            levelSelectionContainer.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω–µ–π
            gameControlsContainer.style.display = 'flex';  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä—ã
            loadLevel(nextPlayableLevel.layout, nextPlayableLevel.id);
        } else {
            console.log("–ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∏–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π.");
            gameCanvasContainer.innerHTML = `<p class="all-levels-completed-message">–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!</p>`;
            levelSelectionContainer.style.display = 'flex'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ (–≥–¥–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ, —á—Ç–æ –≤—Å–µ –ø—Ä–æ–π–¥–µ–Ω–æ)
            gameControlsContainer.style.display = 'none';
            disableGameControls();
            if (currentGame) { currentGame.destroy(); currentGame = null;}
            currentLevelServerId = null;
        }
	};

    if (nextLevelButton) {
	    nextLevelButton.addEventListener('click', nextLevelButtonHandler);
    }
	victoryModalContainer.style.display = 'flex';
}

function hideVictoryModal(): void {
	if (victoryModalContainer) {
		victoryModalContainer.style.display = 'none';
	}
}

async function initializeApp() {
    createHeaderUI();
    createGameControls();
    createVictoryModal();
    await checkInitialAuthStatus(); // –≠—Ç–æ –≤—ã–∑–æ–≤–µ—Ç subscribe –∏ –¥–∞–ª—å–Ω–µ–π—à—É—é –ª–æ–≥–∏–∫—É
                                   // (–ø–æ–∫–∞–∑ authPage –∏–ª–∏ gamePage —Å–æ —Å–ø–∏—Å–∫–æ–º —É—Ä–æ–≤–Ω–µ–π)
}

initializeApp();